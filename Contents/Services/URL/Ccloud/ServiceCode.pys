import base64

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	urls = url.split('cCloudVid')
	furl = (urls[0])
	title = urls[1]
	summary = urls[2]
	thumb = urls[3]
		
	return VideoClipObject(
		title = title,
		url = furl,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='icon-cover.png')
	)

####################################################################################################
def MediaObjectsForURL(url):
	
	splitContent = url.split('cCloudVid')
	url = base64.b64decode(splitContent[0])
	
	if '.flv' in url:
		return [
			MediaObject(
				container = Container.FLV,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=url))]
			)
		]	
	else:
		return [
			MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url=url))]
			)
		]

####################################################################################################
@indirect
def PlayVideo(url):

	#return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
		
	return IndirectResponse(VideoClipObject, key=url)
